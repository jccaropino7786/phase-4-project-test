/// <reference types="react" />
export interface IUserState<UserT = any, WorkSpaceT = any> {
    user?: UserT;
    workspace?: WorkSpaceT;
}
export interface IStatus {
    isLoading: boolean;
    isAuthenticated: boolean;
}
export declare type CallbackFunction = () => void | Promise<void>;
export interface IActions<UserT = any, WorkSpaceT = any> {
    logout: (cb?: CallbackFunction) => Promise<void>;
    setData: (option: IUserState<UserT, WorkSpaceT>) => void;
}
export interface IUserContext<UserT = any, WorkSpaceT = any> extends IUserState<UserT, WorkSpaceT>, IStatus, IActions<UserT, WorkSpaceT> {
}
declare type UserContextKeys = keyof IUserContext<any, any>;
export declare type NonNullableUserContext<UserT, WorkSpaceT> = {
    [K in UserContextKeys]: NonNullable<IUserContext<UserT, WorkSpaceT>[K]>;
};
declare const userContext: import("react").Context<IUserContext<any, any> & IActions<any, any>>;
export default userContext;
